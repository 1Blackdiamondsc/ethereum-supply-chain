// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const originManufacturerName = "Pharma Company"
    const originManufacturerInformation = "Pharma Company Info"
    const originManufacturerLatitude = "-30.3079827"
    const originManufacturerLongitude = "-97.893485"
    var productID = sku + upc
    const productNotes = "Acetylsalicylic acid"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    
    const stateManufactured = 0;
    const statePackaged = 1;
    const stateForSale = 2;
    const stateSold = 3;
    const stateShipped = 4;
    const stateReceived = 5;
    const statePurchased = 6;
   

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    beforeEach(async function() { 
        this.supplyChainContract = await SupplyChain.new({from: accounts[0]});
    });
  
    describe('manufacturer manufacturing, packaging, and selling', () => {

        it("Testing smart contract function manufactureItem() that allows a Manufacturer to manufacture a drug", async() => {            
            if(!await this.supplyChainContract.isManufacturer(originManufacturerID))
                await this.supplyChainContract.addManufacturer(originManufacturerID)

            let isManufacturer = await this.supplyChainContract.isManufacturer(originManufacturerID);
            assert.equal(isManufacturer, true);            

            let resultBufferOne = await this.supplyChainContract.fetchItemBufferOne.call(upc)            
            let sku = parseInt(resultBufferOne) + 1

            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = this.supplyChainContract.Manufactured();
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await this.supplyChainContract.manufactureItem(upc, originManufacturerID, originManufacturerName, originManufacturerInformation, originManufacturerLatitude, originManufacturerLongitude, productNotes, {from: originManufacturerID})

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await this.supplyChainContract.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await this.supplyChainContract.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')        
            assert.equal(resultBufferTwo[5], stateManufactured, 'Error: Invalid item State')
            assert.equal(eventEmitted, true, 'Invalid event emitted')        
        })    
/*
        describe('test fetch methods', () => { 
            // 9th Test
            it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
                const supplyChain = await SupplyChain.deployed()
    
                // Retrieve the just now saved item from blockchain by calling function fetchItem()
                // Retrieve the just now saved item from blockchain by calling function fetchItem()
                const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)            
                
                // Verify the result set:
                assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
                assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
                assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
                assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
                assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
                assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
                assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
                assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            })
    
            // 10th Test
            it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
                const supplyChain = await SupplyChain.deployed()
    
                // Retrieve the just now saved item from blockchain by calling function fetchItem()
                const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
                
                // Verify the result set:
                assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
                assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
                assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
                assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
                assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
                assert.equal(resultBufferTwo[5], 0, 'Error: Missing or Invalid productPrice')
                assert.equal(resultBufferTwo[6], retailerID, 'Error: Missing or Invalid distributorID')
                assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
                assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')                
            })
        });  

        // 2nd Test
        it("Testing smart contract function packageItem() that allows a Manufacturer to package a drug", async() => {
            const supplyChain = await SupplyChain.deployed()
            
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = supplyChain.Packaged()
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await supplyChain.packageItem(upc)

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')        
            assert.equal(resultBufferTwo[5], statePackaged, 'Error: Invalid item State') 
            assert.equal(eventEmitted, true, 'Invalid event emitted')
        })    

        // 3rd Test
        it("Testing smart contract function sellItem() that allows a manufcturer to sell a drug", async() => {
            const supplyChain = await SupplyChain.deployed()
            
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = supplyChain.ForSale()
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await supplyChain.sellItem(upc, productPrice)

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
            assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
            assert.equal(resultBufferTwo[5], stateForSale, 'Error: Invalid item State')        
            assert.equal(eventEmitted, true, 'Invalid event emitted')
            
        });        
    });

    describe('distributor buying a drug', () => { 

        // 4th Test
        it("Testing smart contract function buyItem() that allows a distributor to buy a drug", async() => {
            const supplyChain = await SupplyChain.deployed()
            
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = supplyChain.Sold()
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await supplyChain.buyItem(upc, {from: user2, value:productPrice})

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
            assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
            assert.equal(resultBufferTwo[5], stateSold, 'Error: Invalid item State')        
            assert.equal(eventEmitted, true, 'Invalid event emitted')

        });    
    });
    
    describe('manufacturer shipping a drug', () => { 

        it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
            const supplyChain = await SupplyChain.deployed()
            
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = supplyChain.Shipped()
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await supplyChain.shipItem(upc)

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
            assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
            assert.equal(resultBufferTwo[5], stateShipped, 'Error: Invalid item State')        
            assert.equal(eventEmitted, true, 'Invalid event emitted')
        });
    });


    describe('distributor receiving a drug', () => { 
        // 5th Test
        it("Testing smart contract function buyItem() that allows a retailer to receive a drug", async() => {
            const supplyChain = await SupplyChain.deployed()
            
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Manufactured()
            var event = supplyChain.Received()
            await event.watch((err, res) => {
                eventEmitted = true
            })

            // Mark an item as Manufactured by calling function manufactureItem()
            await supplyChain.receiveItem(upc)

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], originManufacturerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
            assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
            assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
            assert.equal(resultBufferOne[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude')
            assert.equal(resultBufferOne[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
            assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
            assert.equal(resultBufferTwo[5], stateForSale, 'Error: Invalid item State')        
            assert.equal(eventEmitted, true, 'Invalid event emitted')
        })
        */    
    });  
});
